#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Version: python 3.5.2
# Tools: Pycharm 2017.2.2

import numpy as np

"""切片和索引"""

# 1.单个元素索引
x = np.arange(10)
print(x[2])
print(x[-2])
# Numpy数组支持多维数组的多维索引
x.resize(2, 5)
print(x)
print(x[1, 3])
# x[1,-1]的结果等于x[1][-1]，但是第二种情况效率更低，因为第二种方式创建了一个临时数组
print(x[1, -1])
print(x[1][-1])
# 2.切片支持
x = np.arange(10)
print(x[2:5])
print(x[:-7])
print(x[1:7:2])
y = np.arange(35).reshape(5, 7)
print(y)
print(y[1:5:2, ::3])
# 3.索引数组
"""Numpy数组可以被其他数组索引,对于索引数组的所有情况，返回的是原始数据的副本，而不是一个获取切片的视图,索引数组必须是整数类型"""
x = np.arange(10, 1, -1)  # 被索引数组
print(x)
# 使用索引数组来对被索引数组进行索引后，会生成一个与索引数组形状相同的新数组，只是这个新数组的值会用被索引数组中对应索引的值替代
print(x[np.array([3, 3, 1, 8])])
# 4.布尔索引数组
"""
使用（整数）索引列表时，需要提供要选择的索引列表，最后生成的结果形状与索引数组形状相同；
但是在使用布尔索引时，布尔数组必须与要编制索引的数组的初始维度具有相同的形状。在最直接的情况下，布尔数组具有相同的形状：
"""
b = y > 20
print(y[b])
"""
与整数索引数组的情况不同，在布尔数组中，结果是1-D数组，其包含索引数组中的所有元素，对应于布尔数组中的所有真实元素。
索引数组中的元素始终以行优先（C样式）顺序进行迭代和返回。结果也与y[np.nonzero(b)]相同。
与索引数组一样，返回的是数据的副本，而不是一个获取切片的视图。 如果y比b的维数更高，则结果将是多维的
"""
print(b[:, 5])
print(y[b[:, 5]])
# 5.结构化索引工具
# 为了便于数组形状与表达式和赋值关系的匹配，可以在数组索引中使用np.newaxis对象来添加大小为1的新维
print(y.shape)
print(y[:, np.newaxis, :].shape)
# 注意，在数组中没有新的元素，只是维度增加。这可以方便地以一种方式组合两个数组，否则将需要明确重塑操作
x = np.arange(5)
print(x)
print(x[:, np.newaxis] + x[np.newaxis, :])
# 省略语法（三个点）可以用于指示完全选择任何剩余的未指定维度。如果数组z的形状是(3,3,3,3)，那么z[1,...,2]等效于z[1,:,:,2]
print('------------------------------snip1--------------------------')
z = np.arange(81).reshape(3, 3, 3, 3)
print(z)
print('------------------------------snip2--------------------------')
print(z[1, ..., 2])
print('------------------------------snip3--------------------------')
print(z[1, :, :, 2])
# squeeze() 方法可以去除多余的轴，即返回一个将所有长度为1的维度去除的新数组
a = np.arange(6)
a.shape = (2, 1, 3)
print(a)
print(a.squeeze().shape)
# 6.给被索引的数组赋值
x = np.arange(10)
x[2:7] = 1
print(x)
x[2:7] = np.arange(5)
print(x)
